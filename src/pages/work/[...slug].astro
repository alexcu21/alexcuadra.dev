---
import BaseLayout from '../../layouts/BaseLayout.astro';
import LinksToProject from '../../components/LinksToProjects.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Hero from '../../components/Hero.astro';
import Icon from '../../components/Icon.astro';
import Pill from '../../components/Pill.astro';
import { getProjectsInfo } from '../../data/client';

// Fetch static paths for dynamic routing
export async function getStaticPaths() {
  // Fetch project data
  const projects = await getProjectsInfo();

  // Map over projects to generate paths
  return projects.map((project: any) => ({
    params: { slug: project.slug },
    props: { project }, // Pass the project data to the component
  }));
}

const { project } = Astro.props;

// Destructure project fields
const {
  title = "Hey this project needs a title",
  projects: { githuburl = "/404", projectTagline = "Do you need ideas for a tagline", websiteurl = "/404" },
  tags: { nodes: tags },
  featuredImage: {
    node: { sourceUrl: img },
  },
  content,
  modified
} = project;

// const { slug } = Astro.params

// let project;

// try{
// 	const projects = await getProjectsInfo();
// 	project = projects.find((p) => p.slug === slug);
// }catch(error){
// 	console.error("Error fetching project data:", error);
// 	throw new Error("Failed to load project data.");
// }

// if (!project) {
//   throw new Error(`Project with slug "${slug}" not found.`);
// }

// const {
//   title = "Hey this project needs a title",
//   projects: { githuburl = "/404", projectTagline = "Do you need ideas for a tagline", websiteurl = "/404" },
//   tags: { nodes: tags } = { nodes: [] },
//   featuredImage: { node: { sourceUrl: img } = {} },
//   content,
// } = project || {};
---

<BaseLayout title={ title } description={ projectTagline }>
	<div class="stack gap-20">
		<div class="stack gap-15">
			<header>
				<div class="wrapper stack gap-2">
					<a class="back-link" href="/work/"><Icon icon="arrow-left" /> Work</a>
					<Hero title={title} align="start">
						<div class="details">
							<div class="tags">
								{(tags as { name: string }[]).map((tag) => <Pill>{tag.name}</Pill>)}
							</div>
							<p class="description">{projectTagline}</p>
						</div>
					</Hero>
				</div>
			</header>
			<main class="wrapper">
				<div class="stack gap-10 content">
					{img && <img src={img} alt={projectTagline || ''} />}
					<div class="links-to-project">
						<LinksToProject 
							href={ githuburl }
							text='GitHub'
						/>
						<LinksToProject 
							href={ websiteurl }
							text='Website'
						/>
					</div>
					<div class="content" set:html={content}></div>
				</div>
			</main>
		</div>
		<ContactCTA />
	</div>
</BaseLayout>

<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.links-to-project{
		display: flex;
		gap: 0.5rem;
	}

	.back-link {
		display: none;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.content {
		max-width: 65ch;
		margin-inline: auto;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

	.content :global(p){
		line-height: 1.5rem;
	}
	.content :global(img) {
		border-radius: 1.5rem;
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}
</style>
